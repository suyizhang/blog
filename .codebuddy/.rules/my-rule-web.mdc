技术栈架构
前端技术栈
框架: React 18 + TypeScript
构建工具: Vite
样式: Tailwind CSS
路由: React Router v6
状态管理: Zustand (轻量级，适合个人网站)
HTTP客户端: Axios + React Query (数据获取和缓存)
UI组件: Headless UI + 自定义组件
图标: Lucide React
动画: Framer Motion
后端技术栈
运行时: Node.js + TypeScript
框架: Express.js 或 Fastify
数据库: PostgreSQL + Prisma ORM
认证: Passport.js + GitHub OAuth Strategy
会话管理: JWT + Redis (可选)
API文档: Swagger/OpenAPI
部署方案
前端: Vercel 或 Netlify
后端: Railway、Render 或 DigitalOcean
数据库: Supabase PostgreSQL 或 PlanetScale
CDN: Cloudflare
系统架构图
第三方服务

数据存储

后端服务

前端应用

客户端

PC浏览器

移动端浏览器

React + TypeScript

Tailwind CSS

React Router

Zustand状态管理

Express.js API

GitHub OAuth

JWT认证

用户管理

PostgreSQL

Redis缓存

GitHub API

CDN服务

功能模块设计
前端页面结构
src/
├── components/          # 可复用组件
│   ├── ui/             # 基础UI组件
│   ├── layout/         # 布局组件
│   └── features/       # 功能组件
├── pages/              # 页面组件
│   ├── Home/           # 首页
│   ├── About/          # 关于页面
│   ├── Projects/       # 项目展示
│   ├── Blog/           # 博客(可选)
│   ├── Contact/        # 联系方式
│   └── Dashboard/      # 用户仪表板
├── hooks/              # 自定义Hooks
├── store/              # Zustand状态管理
├── services/           # API服务
├── utils/              # 工具函数
└── types/              # TypeScript类型定义
后端API设计
/api/
├── /auth
│   ├── GET  /github          # GitHub OAuth登录
│   ├── GET  /github/callback # OAuth回调
│   ├── POST /logout          # 登出
│   └── GET  /me              # 获取当前用户信息
├── /users
│   ├── GET    /profile       # 获取用户资料
│   └── PUT    /profile       # 更新用户资料
├── /projects                 # 项目管理
├── /blog                     # 博客管理(可选)
└── /contact                  # 联系表单
响应式设计策略
断点设计
Mobile: < 768px
Tablet: 768px - 1024px
Desktop: > 1024px
关键特性
移动端优先设计
触摸友好的交互元素
自适应导航菜单
图片懒加载和优化
性能优化(Core Web Vitals)
GitHub OAuth集成流程
GitHub
后端
前端
用户
GitHub
后端
前端
用户
点击GitHub登录
请求OAuth URL
重定向到GitHub授权
显示授权页面
确认授权
回调带授权码
用授权码换取token
返回access_token
获取用户信息
创建/更新用户记录
返回JWT token
存储token并更新状态
性能优化方案
前端优化
代码分割和懒加载
图片优化(WebP格式)
缓存策略(Service Worker)
Bundle分析和优化
预加载关键资源
后端优化
API响应缓存
数据库查询优化
连接池管理
压缩中间件
限流和防护
安全考虑
HTTPS强制
CORS配置
XSS防护
CSRF保护
输入验证和清理
敏感信息环境变量管理
定期依赖更新
开发工作流
初始化项目结构
配置开发环境
实现基础UI组件
开发页面组件
集成后端API
实现GitHub OAuth
响应式适配
性能优化
测试和部署